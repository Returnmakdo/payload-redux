react-router-dom?

여러페이지를 가진 웹 만들기

컴포넌트를 여러개만들고

shared라는 폴더를 만들어서
Router.js파일 생성
import React from "react";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import Home from "../pages/Home";
import About from "../pages/About";
import Contact from "../pages/Contact";
import Works from "../pages/Works";

const Router = () => {
  return (
    <BrowserRouter>
      <Routes>
				{/* 
						Routes안에 이렇게 작성합니다. 
						Route에는 react-router-dom에서 지원하는 props들이 있습니다.

						paht는 우리가 흔히 말하는 사용하고싶은 "주소"를 넣어주면 됩니다.
						element는 해당 주소로 이동했을 때 보여주고자 하는 컴포넌트를 넣어줍니다.
				 */}
        <Route path="/" element={<Home />} />
        <Route path="about" element={<About />} />
        <Route path="contact" element={<Contact />} />
        <Route path="works" element={<Works />} />
      </Routes>
    </BrowserRouter>
  );
};

export default Router;

만든 Router.js를 App.js에 import

App컴포넌트에 넣어주는 이유는 우리가 만든 프로젝트에서 가장 최상위에 존재하는 컴포넌트가 App.js이기 때문
즉, 어떤 컴포넌트를 띄우든 App.js를 거쳐야하기 때문에 path별로 분기가되는 Router.js를 App.js에 위치시키고
우리의 서비스를 이용하는 모든 사용자가 항상 App.js -> Router.js 를 거치도록 코드를 구현해주는 것이다.


react-router-dom Hooks?

useNavigate
 - 다른페이지로 보내고자 할 때 사용할 수 있다.

사용자들이 브라우저에 직접 path를 입력해서 페이지를 이동하게 만드는 서비스는 거의없고, 통상 어떤 버튼을 누르면
이동하거나 또는 컴포넌트 클릭시 페이지를 이동하게 만든다. 그럴때 사용하는 훅이다.

const App = () => {
  const navigate = useNavigate();

  return (
    <button
      onClick={() => {
        navigate("/works");
      }}
    >
      works로 이동
    </button>
  );
}

export default App;

useLocation
 react-router-dom을 사용하면 우리는 현재 위치하고있는 페이지의 여러가지 정보를 추가적으로 얻을 수 있다.
 이 정보들을 이용해서 페이지안에서 조건부 렌더링에 사용하는 등, 여러가지 용도로 활용할 수 있다.

import React from "react";
import { useLocation } from "react-router-dom";

const App = () => {
  const location = useLocation();
  console.log("location :>> ", location);
  return (
    <div>
      <button>버튼</button>
    </div>
  );
};

export default App;


정리
 - react-router-dom을 사용하면 SPA기반인 리액트 프로젝트 안에서 여러개의 페이지를 구현할 수 있다.
 - Router.js에 Route설정에 관련한 코드를 작성하고, 최상위 컴포넌트인 App.js에서 import해서 사용한다.
 - react-router-dom은 여러가지 훅을 제공한다.


상세페이지 구현하기

Dynamic Route?
 동적 라우팅이라고도 말하는데 path에 유동적인 값을넣어서 특정페이지로 이동하게끔 구현하는 방법을 말합니다.

Router.js에
<Route path="works/:id" element={<Works />} /> 추가

:id 라는것이 바로 동적인값을 받겠다는 의미

works/1, works/2 ... 모두 <Work/>로 이동


query parameter 조회하기

useParams 훅 사용하기
 - path에 있는 id값을 조회할 수  있게 해주는 훅

Work컴포넌트에 
import React from "react";
// 아래 코드를 추가해주세요. 👇
import { useParams } from "react-router-dom";

const Work = () => {
	// 아래 코드를 추가해주세요. 👇
  const param = useParams();
		// 훅을 사용해서 생성한 param을 콘솔에 찍어봅시다.
  console.log(param);
  return <div>Work</div>;
};

export default Work;

이렇게 하고 페이지 실행을 해보면 works/1 을하면 param값으로 콘솔에 id: 1 이 찍히는것을 볼 수있다.



